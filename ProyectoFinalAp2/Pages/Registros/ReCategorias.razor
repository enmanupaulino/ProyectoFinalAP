@page "/ReCategorias"
@page "/ReCategorias/{CategoriaId:int}"
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Models
@inject AuthenticationStateProvider AuthenticationStateProvider



    <EditForm Model="@Categoria" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        @if (AuthenticationStateProvider.GetAuthenticationStateAsync()
    .Result.User.Identity.IsAuthenticated)
        {
            <div class="container">
                <div style="
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        max-width: 800px;
        background-color:  #93baea;
        box-shadow: 7px 13px 37px #93baea;
        padding: 60px;
        margin: auto;
        margin-top: 60px;
        border-radius: 4px;
          ">
                    <center>
                        <h3>Registro de Categorias</h3>
                    </center>
                    <div class=" form-group">
                        <label for=" CategoriaId"><h4 class="font-weight-bold">Id</h4></label>
                        <InputNumber @bind-Value="Categoria.IdCategoria" class="form-control"></InputNumber>
                        <button type="button" class=" btn-primary " @onclick="Buscar">Buscar</button>
                        <ValidationMessage For="@(() => Categoria.IdCategoria)" />

                    </div>
                    <div class="form-group">
                        <label for=" Descripcion"><h4 class="font-weight-bold">Descripcion</h4></label>
                        <InputText @bind-Value="Categoria.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => Categoria.Nombre)" />
                    </div>


                    <div class="form-group">

                        <button type="submit" class="btn btn-primary"> Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                        <button type="button" class="btn btn-danger" @onclick="Limpiar">Limpiar</button>
                    </div>

                    <h5>@mensaje</h5>
                </div>
            </div>

        }
        else
        {
            <h1>No esta registrado</h1>
            <a href="ReUsuarios" class="btn btn-primary">Ir al Registro</a>
        }

    </EditForm>

@code {
    [Parameter]
    public int CategoriaId { get; set; }

    ControllersCategoria controllersCategoria = new ControllersCategoria();
    Categorias Categoria = new Categorias();

    public string mensaje { get; set; }
    string MensajeNombre;

    protected override void OnInitialized()
    {
        Categoria = new Categorias();
        Limpiar();
        if (CategoriaId != 0)
        {
            Categoria.IdCategoria = CategoriaId;
            Buscar();
        }
    }


    public void Guardar()
    {

        LimpiarMensajes();

        if (ExisteNombre())
        {
            MensajeNombre = "Existe una categoria con este nombre, debe ingresar otro.";
            return;
        }

        if (controllersCategoria.Guardar(Categoria))
        {
            Limpiar();
            mensaje = "Categoría guardada correctamente ,Exito";

        }
        else
        {
            mensaje = "Error al guardar Categoría, Fallo";

        }
    }

    public void Buscar()
    {
        Categorias CategoriaTemporal = controllersCategoria.Buscar(Categoria.IdCategoria);

        if (CategoriaTemporal != null)
        {
            Limpiar();
            Categoria = CategoriaTemporal;
            mensaje = "Categoría encontrado., Exito";

        }
        else
        {
            Limpiar();
            mensaje = "La Categoría no fue encontrado., Fallo";

        }
    }

    public void Eliminar()
    {
        Categorias categoria = controllersCategoria.Buscar(Categoria.IdCategoria);

        if (categoria != null)
        {
            if (controllersCategoria.Eliminar(Categoria.IdCategoria))
            {
                Limpiar();
                mensaje = "Categoría eliminado correctamente., Exito";
            }
            else
            {
                mensaje = "Error al eliminar la Categoría., Fallo";
            }
        }
        else
        {
            mensaje = "Error al eliminar la Categoría., Fallo";
        }
    }

    public bool ExisteNombre() //Valida si el nombre existe y lo tiene otra categoria
    {
        bool paso = false;
        var Listado = new List<Categorias>();

        Listado = controllersCategoria.GetList(p => p.Nombre == Categoria.Nombre);

        if (Listado.Count == 1)
        {
            if (Categoria.IdCategoria == 0)
                return paso = true;

            Categorias CategoriaTemporal = new Categorias();
            CategoriaTemporal = Listado[0];
            if (CategoriaTemporal.IdCategoria != CategoriaTemporal.IdCategoria)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

    public void Limpiar()
    {
        this.Categoria = new Categorias();
        LimpiarMensajes();
    }

    public void LimpiarMensajes()
    {
        MensajeNombre = string.Empty;
    }

}
