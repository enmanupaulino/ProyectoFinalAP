@page "/ReUsuarios"
@page "/ReUsuarios/{UsuarioId:int}"
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Models






<EditForm Model="Usuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div style="        margin: 0;
        padding: 0;
        box-sizing: border-box;
        max-width: 800px;
        background-color:  #93baea;
        box-shadow: 7px 13px 37px #93baea;
        padding: 60px;
        margin: auto;
        margin-top: 60px;
        border-radius: 4px;
    ">

            <center>
                <h1>Registro de Usuarios</h1>
            </center>

            <div class="form-group    ">
                <label  for="usuarioId "><h4 class="font-weight-bold">Id</h4></label>

                <InputNumber @bind-Value="@Usuario.IdUsuario" class="form-control" />

                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass" />&nbsp;&nbsp;Buscar</button>


            </div>





            <div class="form-group  ">
                <label class="font-weight-bold" for="FechaIngreso"><h4 class="font-weight-bold">Fecha</h4></label>
                <InputDate @bind-Value="@Usuario.FechaIngreso" class="form-control" />
            </div>




            <div class="form-group ">
                <label  for="Nombres"><h4 class="font-weight-bold">Nombre</h4></label>
                <InputText @bind-Value="@Usuario.Nombres" class="form-control" placeholder="Nombre" />
                <ValidationMessage For="@(()=>Usuario.Nombres)" />
            </div>


            <div class="form-group ">
                <label  for="Apellidos"><h4 class="font-weight-bold">Apellido</h4></label>
                <InputText @bind-Value="@Usuario.Apellidos" class="form-control" placeholder="Apellido" />
                <ValidationMessage For="@(()=>Usuario.Apellidos)" />
            </div>


            <div class="form-group ">
                <label  for="Email"><h4 class="font-weight-bold">Email</h4></label>
                <InputText @bind-Value="@Usuario.Email" class="form-control" placeholder="micorreo@hotmail.com" />
                <ValidationMessage For="@(()=>Usuario.Email)" />
                <p class="validation-message"> @MensajeEmail </p>
            </div>




            <div class="form-group ">
                <label  for="Usuario"><h4 class="font-weight-bold">Usuario</h4></label>
                <InputText @bind-Value="@Usuario.Usuario" class="form-control" placeholder="Nombre de usuario" />
                <ValidationMessage For="@(()=>Usuario.Usuario)" />

            </div>


            <div class="form-group ">
                <label  for="NivelUsuario"><h4 class="font-weight-bold">Nivel del Usuaio</h4></label>
                <InputSelect @bind-Value="NivelSeleccionado" class="form-control" @onclick="SeleccionarNivel">
                    <option value="0" disabled selected>Nivel de Usuario</option>
                    <option value="Usuario">Usuario</option>
                    <option value="Administrador">Administrador</option>
                </InputSelect>
                <ValidationMessage For="@(()=>Usuario.NivelUsuario)" />
            </div>




            <div class="form-group ">
                <label  for="Contrasena"><h4 class="font-weight-bold">Contraseña </h4></label>
                <input type="password" @bind="@Usuario.Contrasena" class="form-control" placeholder="Contraseña" />
                <ValidationMessage For="@(()=>Usuario.Contrasena)" />
            </div>


            <div class="form-group  ">
                <label  for="ConfirmarContrasena"><h4 class="font-weight-bold">Confirmar Contraseña</h4></label>
                <input type="password" @bind="@ConfirmarContrasena" class="form-control" placeholder="Confirmar Contrasena" />
                <p class="validation-message"> @MensajeContrasena </p>
            </div>






            @*<ValidationSummary />*@

            <div class="form-group">

                <button type="submit" class="btn btn-primary "> Guardar</button>
                <button type="button" class="btn btn-danger " @onclick="Eliminar">Eliminar</button>
                <button type="button" class="btn btn-danger " @onclick="Limpiar">Limpiar</button>
            </div>

            <h5>@mensaje</h5>

        </div> 
    </div>
        
</EditForm>






@code {
    [Parameter]
    public int UsuarioId { get; set; }

    ControllersUsuarios controllersUsuarios = new ControllersUsuarios();
    private Usuarios Usuario { get; set; }
    private string NivelSeleccionado = string.Empty;
    private string ConfirmarContrasena = string.Empty;

    private string MensajeEmail = string.Empty;
    private string MensajeUsuario = string.Empty;
    private string MensajeContrasena = string.Empty;
    public string mensaje { get; set; }

    protected override void OnInitialized()
    {
        Usuario = new Usuarios();
        Limpiar();

        if (UsuarioId != 0)
        {
            Usuario.IdUsuario = UsuarioId;
            Buscar();
        }
    }

    private void SeleccionarNivel()
    {
        Usuario.NivelUsuario = NivelSeleccionado;
    }

    public void Guardar()
    {

        LimpiarMensajes();

        if (ExisteEmail())
        {
            MensajeEmail = "Existe un usuario con este Email, debe ingresar otro.";
            return;
        }

        if (ExisteUsuario())
        {
            MensajeUsuario = "Existe un usuario con este nombre de Usuario, debe ingresar otro.";
            return;
        }

        if (Usuario.Contrasena == ConfirmarContrasena == false)
        {
            MensajeContrasena = "Las contraseñas no coinciden.";
            return;
        }

        SeleccionarNivel();
        if (controllersUsuarios.Guardar(Usuario))
        {
            Limpiar();
            mensaje = "Usuario guardado correctamente";

        }
        else
        {
            mensaje = "Error al guardar el usuario";
        }
    }

    public void Buscar()
    {
        Usuarios usuario = controllersUsuarios.Buscar(Usuario.IdUsuario);

        if (usuario != null)
        {
            Limpiar();
            Usuario = usuario;
            NivelSeleccionado = Usuario.NivelUsuario;
            mensaje = "Usuario encontrado.";

        }
        else
        {
            Limpiar();
            mensaje = "El usuario no fue encontrado.";

        }
    }

    public void Eliminar()
    {
        Usuarios usuario = controllersUsuarios.Buscar(Usuario.IdUsuario);

        if (usuario != null)
        {
            if (controllersUsuarios.Eliminar(Usuario.IdUsuario))
            {
                Limpiar();
                mensaje = "Usuario eliminado correctamente.";
            }
            else
            {
                mensaje = "Error al eliminar el Usuario.";
            }
        }
        else
        {
            mensaje = "Error al eliminar el Usuario.";
        }
    }



    public bool ExisteUsuario()
    {
        bool paso = false;
        var Listado = new List<Usuarios>();

        Listado = controllersUsuarios.GetList(p => p.Usuario == Usuario.Usuario);

        if (Listado.Count == 1)
        {
            if (Usuario.IdUsuario == 0)
                return paso = true;

            Usuarios UsuarioTemporal = new Usuarios();
            UsuarioTemporal = Listado[0];
            if (UsuarioTemporal.IdUsuario != Usuario.IdUsuario)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

    public void Limpiar()
    {
        this.Usuario = new Usuarios();
        NivelSeleccionado = "0";
        ConfirmarContrasena = string.Empty;
        LimpiarMensajes();
    }

    public void LimpiarMensajes()
    {
        MensajeEmail = string.Empty;
        MensajeUsuario = string.Empty;
        MensajeContrasena = string.Empty;
    }
    public bool ExisteEmail()
    {
        bool paso = false;
        var Listado = new List<Usuarios>();

        Listado = controllersUsuarios.GetList(p => p.Email == Usuario.Email);

        if (Listado.Count == 1)
        {
            if (Usuario.IdUsuario == 0)
                return paso = true;

            Usuarios UsuarioTemporal = new Usuarios();
            UsuarioTemporal = Listado[0];
            if (UsuarioTemporal.IdUsuario != Usuario.IdUsuario)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }
}
