@page "/ReProveedores"
@page "/ReProveedores/{ProveedorId:int}"
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Models
@inject AuthenticationStateProvider AuthenticationStateProvider



    <EditForm Model="@proveedores" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        @if (AuthenticationStateProvider.GetAuthenticationStateAsync()
    .Result.User.Identity.IsAuthenticated)
        {

            <div class="container">
                <div style="        margin: 0;
        padding: 0;
        box-sizing: border-box;
        max-width: 800px;
        background-color:  #93baea;
        box-shadow: 7px 13px 37px #93baea;
        padding: 60px;
        margin: auto;
        margin-top: 60px;
        border-radius: 4px;
    ">
                    <center>
                        <h3>Registro de Proveedores</h3>
                    </center>

                    <div class=" form-group">
                        <label for=" Proveedor Id">Id</label>
                        <InputNumber @bind-Value="proveedores.IdProveedor" class="form-control"></InputNumber>
                        <button type="button" class=" btn-primary " @onclick="Buscar">Buscar</button>
                        <ValidationMessage For="@(()=>proveedores.IdProveedor)" />

                    </div>
                    <div class="form-group">
                        <label for=" Nombre">Nombre</label>
                        <InputText @bind-Value="proveedores.Nombre" class="form-control" />
                        <ValidationMessage For="@(()=>proveedores.Nombre)" />
                    </div>


                    <div class="form-group">
                        <label for=" Fecha">Fecha</label>
                        <InputDate @bind-Value="proveedores.Fecha" class="form-control"></InputDate>
                        <ValidationMessage For="@(()=>proveedores.Fecha)" />
                    </div>

                    <div class="form-group">
                        <label for="Telefono">Telefono</label>
                        <InputText @bind-Value="proveedores.Telefono" class="form-control"></InputText>
                        <ValidationMessage For="@(()=>proveedores.Telefono)" />
                    </div>



                    <div class="form-group">
                        <label for="Direccion">Direccion</label>
                        <InputText @bind-Value="proveedores.Direccion" class="form-control" />
                        <ValidationMessage For="@(()=>proveedores.Direccion)" />
                    </div>



                    <div class="form-group">

                        <button type="submit" class="btn btn-primary"> Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                        <button type="button" class="btn btn-danger" @onclick="Limpiar">Limpiar</button>
                    </div>

                    <h5>@mensaje</h5>
                </div>

            </div>
        }
        else
        {
            <h1>No esta registrado</h1>
            <a href="ReUsuarios" class="btn btn-primary">Ir al Registro</a>
        }

    </EditForm>


@code {
    [Parameter]
    public int ProveedorId { get; set; }

    ControllersProveedor controllersProveedor = new ControllersProveedor();
    public string mensaje { get; set; }
    private Proveedores proveedores { get; set; }

    private string MensajeNombre = string.Empty;

    protected override void OnInitialized()
    {
        proveedores = new Proveedores();
        Limpiar();

        if (ProveedorId != 0)
        {
            proveedores.IdProveedor = ProveedorId;
            Buscar();
        }
    }

    public void Guardar()
    {

        LimpiarMensajes();

        if (ExisteNombre())
        {
            MensajeNombre = "Existe un proveedor con este nombre, debe elegir otro.";
            return;
        }

        if (controllersProveedor.Guardar(proveedores))
        {
            Limpiar();
            mensaje = "Proveedor guardado correctamente, Exito";

        }
        else
        {
            mensaje = "Error al guardar el proveedor, Fallo";

        }
    }

    public void Buscar()
    {
        Proveedores proveedor = controllersProveedor.Buscar(proveedores.IdProveedor);

        if (proveedor != null)
        {
            Limpiar();
            proveedores = proveedor;
            mensaje = "Proveedor encontrado.";

        }
        else
        {
            Limpiar();
            mensaje = "El proveedor no fue encontrado.";

        }
    }

    public void Eliminar()
    {
        Proveedores proveedor = controllersProveedor.Buscar(proveedores.IdProveedor);

        if (proveedor != null)
        {
            if (controllersProveedor.Eliminar(proveedores.IdProveedor))
            {
                Limpiar();
                mensaje = "Proveedor eliminado correctamente.";
            }
            else
            {
                mensaje = "Error al eliminar el Proveedor.";
            }
        }
        else
        {
            mensaje = "Error al eliminar el Proveedor.";
        }
    }



    public bool ExisteNombre()
    {
        bool paso = false;
        var Listado = new List<Proveedores>();

        Listado = controllersProveedor.GetList(p => p.Nombre == proveedores.Nombre);

        if (Listado.Count == 1)
        {
            if (proveedores.IdProveedor == 0)
                return paso = true;

            Proveedores proveedor = new Proveedores();
            proveedor = Listado[0];
            if (proveedor.IdProveedor != proveedores.IdProveedor)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

    public void Limpiar()
    {
        this.proveedores = new Proveedores();
        LimpiarMensajes();
    }

    public void LimpiarMensajes()
    {
        MensajeNombre = string.Empty;
    }


}
